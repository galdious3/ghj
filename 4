import React, { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { 
  Search, Edit, Trash, ChevronLeft, ChevronRight, AlertCircle
} from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Mus } from "@shared/schema";
import { MusApi } from "@/lib/api";
import { queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

export default function BookingList() {
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  
  const { toast } = useToast();

  const { data: records = [], isLoading, isError } = useQuery({
    queryKey: ["/api/mus"],
    queryFn: MusApi.getAll
  });

  const deleteMutation = useMutation({
    mutationFn: (id: number) => MusApi.delete(id),
    onSuccess: () => {
      toast({
        title: "نجاح",
        description: "تم حذف السجل بنجاح",
        variant: "default",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/mus"] });
    },
    onError: (error) => {
      toast({
        title: "خطأ",
        description: "فشل في حذف السجل",
        variant: "destructive",
      });
    }
  });

  const handleDelete = (ID: number) => {
    if (window.confirm("هل أنت متأكد من حذف هذا السجل؟")) {
      deleteMutation.mutate(ID);
    }
  };

  const filteredRecords = records.filter((record) => {
    const searchString = searchTerm.toLowerCase();
    return (
      record.name.toLowerCase().includes(searchString) ||
      record["name of dep"].toLowerCase().includes(searchString) ||
      record["his accountl"].toString().includes(searchString)
    );
  });

  // الصفحات
  const totalPages = Math.ceil(filteredRecords.length / rowsPerPage);
  const paginatedRecords = filteredRecords.slice(
    (currentPage - 1) * rowsPerPage,
    currentPage * rowsPerPage
  );

  if (isLoading) {
    return (
      <Card>
        <CardContent className="p-12 flex justify-center items-center">
          <div className="animate-pulse text-center">
            <div className="h-6 bg-neutral-200 rounded w-48 mb-4 mx-auto"></div>
            <div className="h-4 bg-neutral-200 rounded w-32 mx-auto"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (isError) {
    return (
      <Card>
        <CardContent className="p-10 flex justify-center items-center">
          <div className="text-center">
            <AlertCircle className="h-10 w-10 text-red-500 mb-4 mx-auto" />
            <h3 className="text-lg font-medium">فشل في تحميل السجلات</h3>
            <p className="text-neutral-500 mt-2">يرجى المحاولة مرة أخرى لاحقاً</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="shadow-sm">
      <CardHeader className="px-6 py-5 border-b border-neutral-200">
        <CardTitle className="text-lg font-medium text-neutral-900">سجلات الحجز</CardTitle>
        <CardDescription className="text-sm text-neutral-500">
          قائمة بجميع السجلات في قاعدة البيانات.
        </CardDescription>
      </CardHeader>
      
      <div className="px-6 py-4 flex justify-between items-center border-b border-neutral-200 bg-neutral-50">
        <div className="relative w-64">
          <Search className="absolute left-3 top-2.5 h-4 w-4 text-neutral-400" />
          <Input
            className="pl-10"
            placeholder="بحث في السجلات..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div className="flex items-center">
          <span className="text-sm text-neutral-500 mr-2">عرض:</span>
          <Select
            value={rowsPerPage.toString()}
            onValueChange={(value) => {
              setRowsPerPage(parseInt(value));
              setCurrentPage(1);
            }}
          >
            <SelectTrigger className="w-[110px]">
              <SelectValue placeholder="10 صفوف" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="10">10 صفوف</SelectItem>
              <SelectItem value="25">25 صف</SelectItem>
              <SelectItem value="50">50 صف</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
      
      <div className="overflow-x-auto">
        <Table className="min-w-full divide-y divide-neutral-200">
          <TableHeader className="bg-neutral-50">
            <TableRow>
              <TableHead className="px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider">الاسم</TableHead>
              <TableHead className="px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider">العمر</TableHead>
              <TableHead className="px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider">القسم</TableHead>
              <TableHead className="px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider">حالة الحساب</TableHead>
              <TableHead className="px-6 py-3 text-left text-xs font-medium text-neutral-500 uppercase tracking-wider">رقم الحساب</TableHead>
              <TableHead className="px-6 py-3 text-right text-xs font-medium text-neutral-500 uppercase tracking-wider">الإجراءات</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody className="bg-white divide-y divide-neutral-200">
            {paginatedRecords.length > 0 ? (
              paginatedRecords.map((record) => (
                <TableRow key={record.ID} className="hover:bg-neutral-50">
                  <TableCell className="px-6 py-4 whitespace-nowrap text-sm font-medium text-neutral-900">{record.name}</TableCell>
                  <TableCell className="px-6 py-4 whitespace-nowrap text-sm text-neutral-500">{record.Age}</TableCell>
                  <TableCell className="px-6 py-4 whitespace-nowrap text-sm text-neutral-500">{record["name of dep"]}</TableCell>
                  <TableCell className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                      record.ID > 5 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {record.ID > 5 ? "نشط" : "غير نشط"}
                    </span>
                  </TableCell>
                  <TableCell className="px-6 py-4 whitespace-nowrap text-sm text-neutral-500">{record["his accountl"]}</TableCell>
                  <TableCell className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0 text-primary mr-2">
                      <Edit className="h-4 w-4" />
                      <span className="sr-only">تعديل</span>
                    </Button>
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      className="h-8 w-8 p-0 text-red-500 hover:text-red-700"
                      onClick={() => handleDelete(record.ID)}
                    >
                      <Trash className="h-4 w-4" />
                      <span className="sr-only">حذف</span>
                    </Button>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={6} className="px-6 py-10 text-center text-sm text-neutral-500">
                  {searchTerm ? "لا توجد سجلات تطابق بحثك." : "لا توجد سجلات متاحة."}
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      
      {filteredRecords.length > 0 && (
        <div className="px-6 py-4 flex items-center justify-between border-t border-neutral-200 bg-neutral-50">
          <div>
            <p className="text-sm text-neutral-700">
              عرض <span className="font-medium">{((currentPage - 1) * rowsPerPage) + 1}</span> إلى{" "}
              <span className="font-medium">
                {Math.min(currentPage * rowsPerPage, filteredRecords.length)}
              </span>{" "}
              من <span className="font-medium">{filteredRecords.length}</span> نتيجة
            </p>
          </div>
          <div className="flex">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
              className="mr-2"
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>
            {[...Array(Math.min(totalPages, 5))].map((_, i) => {
              const pageNum = i + 1;
              return (
                <Button
                  key={i}
                  variant={currentPage === pageNum ? "secondary" : "outline"}
                  size="sm"
                  onClick={() => setCurrentPage(pageNum)}
                  className="mx-1"
                >
                  {pageNum}
                </Button>
              );
            })}
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
              disabled={currentPage === totalPages}
              className="ml-2"
            >
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
        </div>
      )}
    </Card>
  );
};
