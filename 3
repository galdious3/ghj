import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { insertMusSchema } from "@shared/schema";
import { MusApi } from "@/lib/api";
import { queryClient } from "@/lib/queryClient";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Save, User, Briefcase, Calendar, CreditCard, AlertCircle } from "lucide-react";

// قواعد التحقق المدعمة لنموذج التسجيل متوافقة مع الجدول mus
const formSchema = insertMusSchema.extend({
  name: z.string().min(1, "الاسم مطلوب").max(20, "الاسم يجب أن يكون أقل من 20 حرف"),
  Age: z.number().min(1, "العمر يجب أن يكون على الأقل 1").max(120, "العمر يجب أن يكون أقل من 120"),
  "name of dep": z.string().min(1, "القسم مطلوب").max(20, "اسم القسم يجب أن يكون أقل من 20 حرف"),
  // حقول إضافية للنموذج
  ID: z.number().optional(),
  "his accountl": z.number().default(0)
});

interface AddBookingFormProps {
  onSubmitSuccess?: () => void;
}

export default function AddBookingForm({ onSubmitSuccess }: AddBookingFormProps) {
  const [submissionError, setSubmissionError] = useState<string | null>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      Age: undefined,
      "name of dep": "",
      ID: 0,
      "his accountl": 0
    }
  });

  const createRecordMutation = useMutation({
    mutationFn: MusApi.create,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/mus"] });
      form.reset();
      setSubmissionError(null);
      if (onSubmitSuccess) {
        onSubmitSuccess();
      }
    },
    onError: (error: Error) => {
      setSubmissionError(error.message || "فشل في إنشاء السجل. يرجى المحاولة مرة أخرى.");
    }
  });

  function onSubmit(values: z.infer<typeof formSchema>) {
    // التأكد من أن حقل ID هو رقم وليس undefined
    const submitData = {
      ...values,
      ID: values.ID || 0, // استخدام 0 إذا كان الحقل غير محدد
      "his accountl": values["his accountl"] || 0 // استخدام 0 إذا كان الحقل غير محدد
    };
    createRecordMutation.mutate(submitData);
  }

  return (
    <Card className="shadow-sm">
      <CardHeader className="px-6 py-5 border-b border-neutral-200">
        <CardTitle className="text-lg font-medium text-neutral-900">إضافة سجل جديد</CardTitle>
        <CardDescription className="text-sm text-neutral-500">
          أدخل التفاصيل لإنشاء سجل جديد.
        </CardDescription>
      </CardHeader>
      
      <CardContent className="p-6">
        {submissionError && (
          <div className="mb-6 bg-red-50 text-red-800 p-4 rounded-md flex items-start">
            <AlertCircle className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" />
            <p className="text-sm">{submissionError}</p>
          </div>
        )}
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
              <div className="sm:col-span-3">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium text-neutral-700">الاسم الكامل</FormLabel>
                      <FormControl>
                        <div className="relative rounded-md shadow-sm">
                          <span className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <User className="h-4 w-4 text-neutral-400" />
                          </span>
                          <Input 
                            placeholder="أحمد محمد" 
                            className="pl-10" 
                            {...field} 
                          />
                        </div>
                      </FormControl>
                      <FormMessage className="text-sm text-error" />
                    </FormItem>
                  )}
                />
              </div>
              
              <div className="sm:col-span-3">
                <FormField
                  control={form.control}
                  name="Age"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium text-neutral-700">العمر</FormLabel>
                      <FormControl>
                        <div className="relative rounded-md shadow-sm">
                          <span className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <Calendar className="h-4 w-4 text-neutral-400" />
                          </span>
                          <Input 
                            type="number" 
                            placeholder="30" 
                            className="pl-10" 
                            {...field}
                            onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}
                          />
                        </div>
                      </FormControl>
                      <FormMessage className="text-sm text-error" />
                    </FormItem>
                  )}
                />
              </div>
              
              <div className="sm:col-span-6">
                <FormField
                  control={form.control}
                  name="name of dep"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium text-neutral-700">القسم</FormLabel>
                      <FormControl>
                        <div className="relative rounded-md shadow-sm">
                          <span className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <Briefcase className="h-4 w-4 text-neutral-400" />
                          </span>
                          <Input 
                            placeholder="هندسة" 
                            className="pl-10" 
                            {...field} 
                          />
                        </div>
                      </FormControl>
                      <FormMessage className="text-sm text-error" />
                    </FormItem>
                  )}
                />
              </div>
              
              <div className="sm:col-span-3">
                <FormField
                  control={form.control}
                  name="ID"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium text-neutral-700">رقم التعريف (ID)</FormLabel>
                      <FormControl>
                        <div className="relative rounded-md shadow-sm">
                          <span className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <CreditCard className="h-4 w-4 text-neutral-400" />
                          </span>
                          <Input 
                            type="number" 
                            placeholder="1" 
                            className="pl-10" 
                            {...field}
                            onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : 0)}
                          />
                        </div>
                      </FormControl>
                      <FormMessage className="text-sm text-error" />
                    </FormItem>
                  )}
                />
              </div>
              
              <div className="sm:col-span-3">
                <FormField
                  control={form.control}
                  name="his accountl"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-sm font-medium text-neutral-700">رقم الحساب</FormLabel>
                      <FormControl>
                        <div className="relative rounded-md shadow-sm">
                          <span className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <CreditCard className="h-4 w-4 text-neutral-400" />
                          </span>
                          <Input 
                            type="number" 
                            placeholder="0" 
                            className="pl-10" 
                            {...field}
                            onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : 0)}
                          />
                        </div>
                      </FormControl>
                      <FormMessage className="text-sm text-error" />
                    </FormItem>
                  )}
                />
              </div>
            </div>
            
            <div className="flex justify-end space-x-3">
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => form.reset()}
              >
                إلغاء
              </Button>
              <Button 
                type="submit" 
                disabled={createRecordMutation.isPending}
                className="bg-primary-600 hover:bg-primary-700 mr-3"
              >
                <Save className="h-4 w-4 ml-2" />
                {createRecordMutation.isPending ? "جاري الحفظ..." : "حفظ السجل"}
              </Button>
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}
